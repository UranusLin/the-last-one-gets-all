/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GameContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CALL_COST"
      | "GAME_DURATION"
      | "call"
      | "claimPrize"
      | "getGameStatus"
      | "lastCallTime"
      | "lastCaller"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameCalled" | "GameEnded"): EventFragment;

  encodeFunctionData(functionFragment: "CALL_COST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GAME_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "call", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCallTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCaller",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CALL_COST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GAME_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCallTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastCaller", data: BytesLike): Result;
}

export namespace GameCalledEvent {
  export type InputTuple = [caller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [caller: string, amount: bigint];
  export interface OutputObject {
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike, prize: BigNumberish];
  export type OutputTuple = [winner: string, prize: bigint];
  export interface OutputObject {
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameContract extends BaseContract {
  connect(runner?: ContractRunner | null): GameContract;
  waitForDeployment(): Promise<this>;

  interface: GameContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CALL_COST: TypedContractMethod<[], [bigint], "view">;

  GAME_DURATION: TypedContractMethod<[], [bigint], "view">;

  call: TypedContractMethod<[], [void], "payable">;

  claimPrize: TypedContractMethod<[], [void], "nonpayable">;

  getGameStatus: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, boolean] & {
        _lastCaller: string;
        _lastCallTime: bigint;
        _balance: bigint;
        _isGameRunning: boolean;
      }
    ],
    "view"
  >;

  lastCallTime: TypedContractMethod<[], [bigint], "view">;

  lastCaller: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CALL_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAME_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "call"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGameStatus"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, boolean] & {
        _lastCaller: string;
        _lastCallTime: bigint;
        _balance: bigint;
        _isGameRunning: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastCallTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastCaller"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameCalled"
  ): TypedContractEvent<
    GameCalledEvent.InputTuple,
    GameCalledEvent.OutputTuple,
    GameCalledEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;

  filters: {
    "GameCalled(address,uint256)": TypedContractEvent<
      GameCalledEvent.InputTuple,
      GameCalledEvent.OutputTuple,
      GameCalledEvent.OutputObject
    >;
    GameCalled: TypedContractEvent<
      GameCalledEvent.InputTuple,
      GameCalledEvent.OutputTuple,
      GameCalledEvent.OutputObject
    >;

    "GameEnded(address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
  };
}
